package car.auction.datasource;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import car.auction.domain.BiddingCar;
import car.auction.domain.Car;

public class CarMapper {
	
	private static final String getAllCarsStatement = "SELECT * FROM APP.car";
	
	private static final String getCarByIdStatement = "SELECT * FROM APP.car WHERE id = ?";
	
	private static final String updateCarStatementString = "UPDATE APP.car"
			+ " SET regno = ?, make = ?, model = ?, variant = ?, buildyear = ?"
			+ " WHERE id = ?";
	
	private static final String updateBidStatementString = "UPDATE APP.car "
			+ "SET currentbid = ?"
			+ " WHERE id = ?";
	
	private static final String insertStatementString =
            "INSERT INTO APP.car(regno, make, model, variant, buildyear, salesdate, currentbid)"
            + " VALUES (?, ?, ?, ?, ?, ?, ?)";
	
	private static final String deleteStatementString =
    		"DELETE FROM APP.car"
    		+ " WHERE id = ?";

	public static void updateCarInfo(BiddingCar cb) {
		PreparedStatement updateStatement = null;
		
		try {
			updateStatement = DBConnection.prepare(updateCarStatementString);
			
			updateStatement.setString(1, cb.getRegisterNumber());
			updateStatement.setString(2, cb.getMake());
			updateStatement.setString(3, cb.getModel());
			updateStatement.setString(4, cb.getVariant());
			updateStatement.setInt(5, cb.getYear());
			updateStatement.setInt(6, cb.getId());
			
			updateStatement.execute();
			
		} catch (Exception e) {
			System.out.println("update error: " + e.getMessage());
		}
	}
	
	public static void updateBid(float currentbid, int id) {
		PreparedStatement updateStatement = null;
		
		try {
			updateStatement = DBConnection.prepare(updateBidStatementString);
			
			updateStatement.setFloat(1, currentbid);
			updateStatement.setInt(2, id);
			
			updateStatement.execute();
			
		} catch (Exception e) {
			System.out.println("update error: " + e.getMessage());
		}
	}
	
	public static void insert(BiddingCar cb) {
		ResultSet autoGenerated = null;
		PreparedStatement insertStatement = null;
		
		try {
			insertStatement = DBConnection.prepare(insertStatementString, Statement.RETURN_GENERATED_KEYS);
			
			insertStatement.setString(1, cb.getRegisterNumber());
			insertStatement.setString(2, cb.getMake());
			insertStatement.setString(3, cb.getModel());
			insertStatement.setString(4, cb.getVariant());
			insertStatement.setInt(5, cb.getYear());
			insertStatement.setLong(6, cb.getEndtime());
			insertStatement.setFloat(7, cb.getCurrentBid());
			
			insertStatement.executeUpdate();
			
			autoGenerated = insertStatement.getGeneratedKeys();
            if (autoGenerated.next()) {
                cb.setId(autoGenerated.getInt(1));
            }
            
		} catch (SQLException e) {
        	System.out.println("Insert error: " + e.getMessage());
		}
	}
	
	// delete car from database
    public static void delete(int id) {
    	PreparedStatement deleteStatement = null;
    	
    	try {
    		deleteStatement = DBConnection.prepare(deleteStatementString);
    		deleteStatement.setInt(1, id);
    		
    		deleteStatement.execute();
    	} catch (SQLException e) {
    		System.out.println("Delete error: " + e.getMessage());
		}
    }  
	
	public static List<BiddingCar> getAllCars(){
		List<BiddingCar> result = new ArrayList<>();
		
		try {
			PreparedStatement stmt = DBConnection.prepare(getAllCarsStatement);
			
			ResultSet rs = stmt.executeQuery();
			
			while (rs.next()) {
				BiddingCar car = new BiddingCar (rs.getInt(1), rs.getInt(2), rs.getString(3), rs.getString(4), rs.getString(5),
						rs.getString(6), rs.getInt(7), rs.getLong(9), rs.getFloat(10));
				
				result.add(car);
			}
			
		} catch (SQLException e) {
			System.out.println("load error: " + e.getMessage());
		}
		
		return result;
	}
	

	// get car information by id
	public static BiddingCar getCarById(int id) {
        BiddingCar result = null;
        PreparedStatement getStatement = null;
        ResultSet rs = null;
        try {
            getStatement = DBConnection.prepare(getCarByIdStatement);
            getStatement.setInt(1, id);
            rs = getStatement.executeQuery();
            while (rs.next()) {
            	BiddingCar bc = new BiddingCar (rs.getInt(1), rs.getInt(2), rs.getString(3), rs.getString(4), rs.getString(5),
						rs.getString(6), rs.getInt(7), rs.getLong(9), rs.getFloat(10));
          	
            	result = bc;
            }

        } catch (SQLException e) {
        	System.out.println("load error: " + e.getMessage());
        }
        
        return result;
    }
}
