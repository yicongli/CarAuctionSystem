package car.auction.datasource;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import car.auction.domain.Buyer;

public class BuyerMapper {
	
	private static final String getAllBuyersStatement = "SELECT * FROM APP.buyer";
	
	private static final String getUserByIDStatement = "SELECT * FROM APP.buyer WHERE id = ?";
	
	private static final String getUserByUsernameStatement = "SELECT * FROM APP.buyer WHERE username = ?";
	
	private static final String updateStatementString =
            "UPDATE APP.buyer " +
                    "  SET username = ?, password = ?, firstname = ?, lastname = ?, phoneno = ?" +
                    "  WHERE id = ?";

    private static final String insertStatementString =
            "INSERT INTO APP.buyer(username, password, firstname, lastname, phoneno) VALUES (?, ?, ?, ?, ?)";
    
    private static final String deleteStatementString =
    		"DELETE FROM APP.buyer "+
    				"WHERE id = ?";
	
	public static void update(Buyer b) {
        PreparedStatement updateStatement = null;
        
        try {
            updateStatement = DBConnection.prepare(updateStatementString);
            updateStatement.setString(1, b.getUsername());
            updateStatement.setString(2, b.getPassword());
            updateStatement.setString(3, b.getFirstname());
            updateStatement.setString(4, b.getLastname());
            updateStatement.setString(5, b.getPhoneNumber());
            updateStatement.setInt(6, b.getId());

            updateStatement.execute();

        } catch (SQLException e) {
        	System.out.println("Update error:" + e.getMessage());
        }
    }

    public static void insert(Buyer b) {
        ResultSet autoGenerated = null;
        PreparedStatement insertStatement = null;
        
        try {
            insertStatement = DBConnection.prepare(insertStatementString, Statement.RETURN_GENERATED_KEYS);

            insertStatement.setString(1, b.getUsername());
            insertStatement.setString(2, b.getPassword());
            insertStatement.setString(3, b.getFirstname());
            insertStatement.setString(4, b.getLastname());
            insertStatement.setString(5, b.getPhoneNumber());

            insertStatement.executeUpdate();

            autoGenerated = insertStatement.getGeneratedKeys();
            if (autoGenerated.next()) {
                b.setId(autoGenerated.getInt(1));
            }

        } catch (SQLException e) {
        	System.out.println("Insert error: " + e.getMessage());
        	// TODO handle the error situation
        }
    }
    
    public static void delete(Buyer b) {
    	PreparedStatement deleteStatement = null;
    	
    	try {
    		deleteStatement = DBConnection.prepare(deleteStatementString);
    		deleteStatement.setInt(1, b.getId());
    		deleteStatement.execute();
    	} catch (SQLException e) {
    		System.out.println("Delete error: " + e.getMessage());
    		// TODO handle the error situation
		}
    }  
	
	public static List<Buyer> getAllBuyers () {
		List<Buyer> result = new ArrayList<>();
	
		try {
			PreparedStatement stmt = DBConnection.prepare(getAllBuyersStatement);

			  ResultSet rs = stmt.executeQuery();
			  while (rs.next()) {
				  Buyer buyer = new Buyer (rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4),
						  rs.getString(5), rs.getString(6));
				  
				  result.add(buyer);
				  
				  UnitOfWork.registerClean(buyer);
			  }

		} catch (SQLException e) {
			System.out.println("load error: " + e.getMessage());
    		// TODO handle the error situation
		}
		
		return result;

	}
	
	
	public static Buyer getUserByID(int id) {
        Buyer result = null;
        PreparedStatement getStatement = null;
        ResultSet rs = null;
        try {
            getStatement = DBConnection.prepare(getUserByIDStatement);
            getStatement.setInt(1, id);
            rs = getStatement.executeQuery();
            while (rs.next()) {
            	Buyer buyer = new Buyer (rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4)
						  , rs.getString(5), rs.getString(6));
            	
            	result = buyer;
            }

        } catch (SQLException e) {
        	System.out.println("load error: " + e.getMessage());
    		// TODO handle the error situation
        }
        return result;
    }
		
	public static Buyer getBuyerByUsername(String username) {
        Buyer result = null;
        PreparedStatement getStatement = null;
        ResultSet rs = null;
        try {
            getStatement = DBConnection.prepare(getUserByUsernameStatement);
            getStatement.setString(1, username);
            rs = getStatement.executeQuery();
            while (rs.next()) {
            	Buyer buyer = new Buyer (rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4)
						  , rs.getString(5), rs.getString(6));
          	
            	result = buyer;
            }

        } catch (SQLException e) {
        	System.out.println("load error: " + e.getMessage());
    		// TODO handle the error situation
        }
        
        return result;
    }

	
}
