package car.auction.datasource;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import car.auction.domain.Buyer;

public class BuyerMapper {
	
	public static void main(String [] args)
	{
		for(Buyer b: getAllBuyers()) {
			System.out.println(b.getId()+" "+ b.getUsername() +" "+ b.getPassword() +" "+ b.getFirstname() +" "+ b.getLastname());
		}
		
		
	}

	
	private static final String getAllBuyers = "SELECT * FROM APP.buyer";
	
	private static final String getUserByID = "SELECT * FROM APP.buyer WHERE id = ?";
	
	private static final String getUserByUsername = "SELECT * FROM APP.buyer WHERE username = ?";
	
	private static final String updateStatementString =
            "UPDATE APP.buyer " +
                    "  SET username = ?, password = ?, firstname = ?, lastname = ?, phoneno = ?" +
                    "  WHERE id = ?";

    private static final String insertStatementString =
            "INSERT INTO APP.buyer(username, password, firstname, lastname, phoneno) VALUES (?, ?, ?, ?, ?)";
    
    private static final String deleteStatementString =
    		"DELETE FROM APP.buyer "+
    				"WHERE id = ?";
	
	public static void update(Buyer b) {
        PreparedStatement updateStatement = null;
        
        try {
            updateStatement = DBConnection.prepare(updateStatementString);
            updateStatement.setString(1, b.getUsername());
            updateStatement.setString(2, b.getPassword());
            updateStatement.setString(3, b.getFirstname());
            updateStatement.setString(4, b.getLastname());
            updateStatement.setString(5, b.getPhoneNumber());
            updateStatement.setInt(6, b.getId());

            updateStatement.execute();

        } catch (SQLException e) {
        	System.out.println("Update error:" + e.getMessage());
        }
    }

    public static int insert(Buyer b) {
        ResultSet autoGenerated = null;
        PreparedStatement insertStatement = null;
        
        try {
            insertStatement = DBConnection.prepare(insertStatementString, Statement.RETURN_GENERATED_KEYS);

            insertStatement.setString(1, b.getUsername());
            insertStatement.setString(2, b.getPassword());
            insertStatement.setString(3, b.getFirstname());
            insertStatement.setString(4, b.getLastname());
            insertStatement.setString(5, b.getPhoneNumber());

            insertStatement.executeUpdate();

            autoGenerated = insertStatement.getGeneratedKeys();
            if (autoGenerated.next()) {
                b.setId(autoGenerated.getInt(1));
            }

            Registry.addBuyer(b);
        } catch (SQLException e) {
        	System.out.println("Insert error: " + e.getMessage());
        	return -1;
        }
        
        return b.getId();
    }
    
    public static void delete(Buyer b) {
    	PreparedStatement deleteStatement = null;
    	
    	try {
    		deleteStatement = DBConnection.prepare(deleteStatementString);
    		deleteStatement.setInt(1, b.getId());
    		deleteStatement.executeQuery();
    	} catch (SQLException e) {
    		System.out.println("Delete error: " + e.getMessage());
		}
    }
	
	public static Buyer load(ResultSet rs) throws SQLException {
		int idArg = rs.getInt(1);
		
		Buyer result = Registry.getBuyer(idArg);
        if (result != null)
            return result;
		
		String usernameArg = rs.getString(2);
        String passwordArg = rs.getString(3);
        String firstnameArg = rs.getString(4);
        String lastnameArg = rs.getString(5);
        String phonenoArg = rs.getString(6);
        
        result = new Buyer(idArg, usernameArg, passwordArg, firstnameArg, lastnameArg, phonenoArg);
        Registry.addBuyer(result);
        
        return result;
    }
	
	public static List<Buyer> getAllBuyers () {
		List<Buyer> result = new ArrayList<>();
		
		try {
			PreparedStatement stmt = DBConnection.prepare(getAllBuyers);

			  ResultSet rs = stmt.executeQuery();
			  while (rs.next()) {
				  result.add(load(rs));
			  }

		} catch (SQLException e) {
	      
		}
		
		return result;

	}
	
	public static Buyer getUserByID(int id) {
        Buyer result = null;
        PreparedStatement getStatement = null;
        ResultSet rs = null;
        try {
            getStatement = DBConnection.prepare(getUserByID);
            getStatement.setInt(1, id);
            rs = getStatement.executeQuery();
            while (rs.next()) {
                result = load(rs);
            }

        } catch (SQLException e) {
        }
        return result;
    }
		
	public static Buyer getUserByUsername(String username) {
        Buyer result = null;
        PreparedStatement getStatement = null;
        ResultSet rs = null;
        try {
            getStatement = DBConnection.prepare(getUserByUsername);
            getStatement.setString(1, username);
            rs = getStatement.executeQuery();
            while (rs.next()) {
                result = load(rs);
            }

        } catch (SQLException e) {
        }
        return result;
    }

	
}
